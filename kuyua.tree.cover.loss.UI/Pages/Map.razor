@page "/map"
@inject HttpClient Http
@inject IJSRuntime jsruntime;

<PageTitle>Tree Cover Loss Map</PageTitle>

<h1>map</h1>

<!DOCTYPE html>
<html>

<body>
    <div id="map"></div>
<script>
    
    const token = "pk.eyJ1IjoiYWhtZWQta2FyZWVtIiwiYSI6ImNsd2dyNGcxODA3cWIycXBmaGR0cmR1MDQifQ.WQEt6T2zLTS3F8fJ6SOwdA";
    mapboxgl.accessToken = token;
    
    const map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/streets-v12',
        center: [-79.4512, 43.6568],
        zoom: 8
    });

    /* Given a query in the form "lng, lat" or "lat, lng"
     * returns the matching geographic coordinate(s)
     * as search results in carmen geojson format,
     * https://github.com/mapbox/carmen/blob/master/carmen-geojson.md */
    const coordinatesGeocoder = function (query) {
        // Match anything which looks like
        // decimal degrees coordinate pair.
        const matches = query.match(
            /^[ ]*(?:Lat: )?(-?\d+\.?\d*)[, ]+(?:Lng: )?(-?\d+\.?\d*)[ ]*$/i
        );
        if (!matches) {
            return null;
        }

        function coordinateFeature(lng, lat) {
            return {
                center: [lng, lat],
                geometry: {
                    type: 'Point',
                    coordinates: [lng, lat]
                },
                place_name: 'Lat: ' + lat + ' Lng: ' + lng,
                place_type: ['coordinate'],
                properties: {},
                type: 'Feature'
            };
        }

        const coord1 = Number(matches[1]);
        const coord2 = Number(matches[2]);
        const geocodes = [];

        if (coord1 < -90 || coord1 > 90) {
            // must be lng, lat
            geocodes.push(coordinateFeature(coord1, coord2));
        }

        if (coord2 < -90 || coord2 > 90) {
            // must be lat, lng
            geocodes.push(coordinateFeature(coord2, coord1));
        }

        if (geocodes.length === 0) {
            // else could be either lng, lat or lat, lng
            geocodes.push(coordinateFeature(coord1, coord2));
            geocodes.push(coordinateFeature(coord2, coord1));
        }

        return geocodes;
    };

    // Add the control to the map.
    map.addControl(
        new MapboxGeocoder({
            accessToken: mapboxgl.accessToken,
            localGeocoder: coordinatesGeocoder,
            zoom: 4,
            placeholder: 'Try: -40, 170',
            mapboxgl: mapboxgl,
            reverseGeocode: true
        })
    );

</script>
</body>

</html>

@code {
    private string? city;
    private string? country;
    private string? street;
    private string? zipcode;
    string token = "pk.eyJ1IjoiYWhtZWQta2FyZWVtIiwiYSI6ImNsd2dyNGcxODA3cWIycXBmaGR0cmR1MDQifQ.WQEt6T2zLTS3F8fJ6SOwdA";
    protected override async void OnInitialized()
    {

        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("city", out var cty)) city = cty;
        if (query.TryGetValue("country", out var cntry)) country = cntry;
        if (query.TryGetValue("street", out var stret)) street = stret;
        if (query.TryGetValue("zipcode", out var zcode)) zipcode = zcode;
        await jsruntime.InvokeVoidAsync("prepareMap", country + street + city + zipcode);
        //var coordinates = await
        //Http.GetFromJsonAsync<locations[]>($"https://api.mapbox.com/geocoding/v5/mapbox.places/{city,country,stree,zipcode}.json?access_token={token}");
        //var treecoverloss = await
        //Http.GetFromJsonAsync<WeatherForecast[]>($"https://localhost:3000/api/tree-cover-loss?latlng={coordinates}");

    }
}