@page "/map"
@inject HttpClient Http
@inject IJSRuntime JsRuntime;



<!DOCTYPE html>
<html>

<body class="container">
    <h1> map 
    <Icon Name="IconName.GeoFill " Size="IconSize.x2" Color="IconColor.Primary" />

    </h1>
    <div id="treeData"></div>

    <div class="row">
        <div style="margin-top: 10%" class="row" id="map"></div>
    </div>
</body>

</html>

@code {

    private string? city;
    private string? country;
    private string? street;
    private string? zipcode;
    string token = "pk.eyJ1IjoiYWhtZWQta2FyZWVtIiwiYSI6ImNsd2dyNGcxODA3cWIycXBmaGR0cmR1MDQifQ.WQEt6T2zLTS3F8fJ6SOwdA";
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
            var query = QueryHelpers.ParseQuery(uri.Query);

            if (query.TryGetValue("city", out var cty)) city = cty;
            if (query.TryGetValue("country", out var cntry)) country = cntry;
            if (query.TryGetValue("street", out var stret)) street = stret;
            if (query.TryGetValue("zipcode", out var zcode)) zipcode = zcode;
            string ss = country + "," + street + "," + city + "," + zipcode;

            await JsRuntime.InvokeAsync<object>("myJsFunction", ss);

            // await jsruntime.InvokeVoidAsync("prepareMap", country + street + city + zipcode);
            //var coordinates = await
            //Http.GetFromJsonAsync<locations[]>($"https://api.mapbox.com/geocoding/v5/mapbox.places/{city,country,stree,zipcode}.json?access_token={token}");
            //var treecoverloss = await
            //Http.GetFromJsonAsync<WeatherForecast[]>($"https://localhost:3000/api/tree-cover-loss?latlng={coordinates}");
        }
    }


}
<script>
    function myJsFunction(address) {
        var longitude;
        var latitude;
        const token = "pk.eyJ1IjoiYWhtZWQta2FyZWVtIiwiYSI6ImNsd2dyNGcxODA3cWIycXBmaGR0cmR1MDQifQ.WQEt6T2zLTS3F8fJ6SOwdA";
        mapboxgl.accessToken = token;

        const map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/streets-v12',
            center: [-79.4512, 43.6568],
            zoom: 8
        });
        var url = "https://api.mapbox.com/geocoding/v5/mapbox.places/" + encodeURIComponent(address) + ".json?access_token=" + token;
        console.log(url);
        fetch(url)
            .then(response => response.json())
            .then(data => {
                longitude = data.features[0].center[0];
                latitude = data.features[0].center[1];
                console.log('Longitude: ', longitude, 'Latitude: ', latitude);
                //new add marker then fly 
                const marker = new mapboxgl.Marker();
                const lngLat = {
                    lon: longitude,
                    lat: latitude
                };

                marker.setLngLat(lngLat).addTo(map);
                map.flyTo({ center: [longitude, latitude] });

                //call tree cover loss api 
                var treeUrl = "http://localhost:3000/api/tree-cover-loss?latlng=" + latitude + "," + longitude;
                console.log(treeUrl);
                fetch(treeUrl)
                    .then(treeResponse => treeResponse.json())
                    .then(treeData => {
                        // Process tree cover loss data
                        console.log(treeData);
                        console.log(treeData.treeCover2000);
                        // Display treeData in an HTML tag
                        const treeDataElement = document.getElementById('treeData');
                        treeDataElement.textContent = "Tree cover loss : " + JSON.stringify(treeData.treeCover2000);
                        // Further processing of treeData
                    })

            });

        /* Given a query in the form "lng, lat" or "lat, lng"
         * returns the matching geographic coordinate(s)
         * as search results in carmen geojson format,
         * https://github.com/mapbox/carmen/blob/master/carmen-geojson.md */
        const coordinatesGeocoder = function (query) {
            // Match anything which looks like
            // decimal degrees coordinate pair.
            const matches = query.match(
                /^[ ]*(?:Lat: )?(-?\d+\.?\d*)[, ]+(?:Lng: )?(-?\d+\.?\d*)[ ]*$/i
            );
            if (!matches) {
                return null;
            }

            function coordinateFeature(lng, lat) {
                return {
                    center: [lng, lat],
                    geometry: {
                        type: 'Point',
                        coordinates: [lng, lat]
                    },
                    place_name: 'Lat: ' + lat + ' Lng: ' + lng,
                    place_type: ['coordinate'],
                    properties: {},
                    type: 'Feature'
                };
            }

            const coord1 = Number(matches[1]);
            const coord2 = Number(matches[2]);
            const geocodes = [];

            if (coord1 < -90 || coord1 > 90) {
                // must be lng, lat
                geocodes.push(coordinateFeature(coord1, coord2));
            }

            if (coord2 < -90 || coord2 > 90) {
                // must be lat, lng
                geocodes.push(coordinateFeature(coord2, coord1));
            }

            if (geocodes.length === 0) {
                // else could be either lng, lat or lat, lng
                geocodes.push(coordinateFeature(coord1, coord2));
                geocodes.push(coordinateFeature(coord2, coord1));
            }

            return geocodes;
        };

        // Add the control to the map.
        map.addControl(
            new MapboxGeocoder({
                accessToken: mapboxgl.accessToken,
                localGeocoder: coordinatesGeocoder,
                zoom: 4,
                placeholder: 'Try: -40, 170',
                mapboxgl: mapboxgl,
                reverseGeocode: true
            })
        );

    }

</script>
